 bad notifier

 setInterval(() => {
        var request = require('request')
        var url = 'http://search.roblox.com/catalog/json?&ResultsPerPage=50&SortType=3&Subcategory=0&Category=0'
        var sendChannel = client.channels.get('487369498396065795')


        request(url, {json:true}, (err, res, body) => {
            if (body != undefined) {
                var assets = body
                for (x in assets) {
                    let asset = assets[x]
                    if (asset.AssetId != undefined) {
                        let remaining = parseInt(asset.Remaining)
                        let timer = parseInt(asset.OffSaleDeadline)
                        if (!isNaN(remaining)) {
                            if (remaining > 0 && !loggedAssets[asset.Name]) {
                                var numb = asset.Sales.match(/\d/g);
                                numb = numb.join("");
                                var total = parseInt(asset.Remaining) + parseInt(numb)
                                loggedAssets[asset.Name] = true
                                const embed = new Discord.RichEmbed()
                                 .setTitle("**Click here to purchase**")
                                 .setURL(`https://roblox.com/catalog/${asset.AssetId}`)
                                 .addField("New Limited U!", asset.Name)
                                 .addField("Price in Robux", asset.Price + " ROBUX")
                                 .setThumbnail(`http://www.roblox.com/Thumbs/Asset.ashx?Width=110&Height=110&AssetID=${asset.AssetId}`)
                                 .addField("Limited Quantity", `${asset.Sales}/${total}`)
                                 .setColor(6605055)
                                // .setTimestamp()
                                sendChannel.send({embed})
                            }
                        }
                        if (!isNaN(timer)) {
                            if (timer > 0 &&  !loggedAssets[asset.Name]) {
                                loggedAssets[asset.Name] = true
                                const embed = new Discord.RichEmbed()
                                 .setTitle("**Click here to purchase**")
                                 .setURL(`https://roblox.com/catalog/${asset.AssetId}`)
                                 .addField("New Item on Sale!", asset.Name)
                                 .addField("Price in Robux", asset.Price + " ROBUX")
                                 .addField("Timer", secondsToHours(timer) + ' hours')
                                 .setThumbnail(`http://www.roblox.com/Thumbs/Asset.ashx?Width=110&Height=110&AssetID=${asset.AssetId}`)
                                 .setColor(6605055)
                                // .setTimestamp()
                                sendChannel.send({embed})
                            }
                        }
                    }
                }
            }
        })
    }, 5001)

-------------------------------------
client.getData("Cleverbot Ignore List").then(request => {
  let list = JSON.parse(request)
  if (list) {
    if (!list[message.author.id]) {
      let mentions = message.mentions.members
      let match =  matchMention(message.content)

      if (match || message.channel.type == 'dm') {
        client.cleverbot.create(function(bad, session) {
           if (!message.content.match('!ignore') && !list[message.author.id]) {
              message.channel.startTyping()
              if (message.channel.type == 'dm') {
                match = message.content
              }
              if (message.content == "cleverbot off") {
                message.channel.send("Responding to you has been turned `off.`")
                list[message.author.id] = true
                return
              }
              if (message.content == "cleverbot on") {
                message.channel.send("Responding to you has been turned `on.`")
                delete list[message.author.id]
                return
              }
              client.cleverbot.ask(match, function(err, response) {
                 if (message.channel.type == 'dm') {
                   message.author.send(response)
                 } else {
                   message.channel.send(response + ' <@!' + message.author.id + '>')
                 }
                 message.channel.stopTyping()
              })
           }
        })
     }
    }
  }

})


all coins

if (action == 'allcoins') {
  var total = 0
  let members = guild.members
  for (member in members.array()) {
    client.redisClient.get(members.array()[member].id + "-" + guild.id + '-coins', function(err, coins) {
      if (coins) {
        total = parseInt(total + coins)
      }
    })
  }
  message.channel.send("There are `" + total + "` coins in circulation.")
}

shop data
if (action == 'additem') {
                if (level < 4) return;
                let types = acceptableTypes.array().join("\n")
                const type = await client.awaitReply(message, `What type of item will this be? Choose between ${acceptableTypes.array().length} types **(caSE senSITIve)**:\n ${types}`)
                if (type) {
                    if (!acceptableTypes[type]) {
                       return message.channel.send("That is not an acceptable type!")
                    } else {
                        if (type == "Role") {
                          if (!client.checkPerm(message.guild.members.get(client.id), "MANAGE_ROLES")) {
                              return message.channel.send("Sorry, but I require a role with the `Manage Roles` permission! Check them and try again.")
                          }
                          const name = await client.awaitReply(message, "What will the name of the role be? You can fully customize this role yourself, such as color, position, etc.\nBe warned that if this role is deleted, the shop in the item will not work and you must delete it!\nI cannot add roles that are above me either.")
                          if (name) {
                              const cost = await client.awaitReply(message, "What will the price of the role be?")
                              if (cost) {
                                  if (!isNaN(parseInt(cost))) {
                                      cost = Math.floor(parseInt(cost))
                                      const desc = await client.awaitReply(message, "Final step! What is the description for this role?")
                                      if (desc) {
                                          let newRoleData = {
                                              type: 'Role',
                                              price: cost,
                                              description: desc,
                                          }
                                          guild.createRole({name: name})
                                          .then(r => {
                                            newRoleData.id = r.id
                                            shopData.items[name] = newRoleData
                                            client.redisClient.set(guildKey, shopData)
                                            message.channel.send("Role successfully added to the shop!")
                                          }).catch(err => message.channel.send("There seemed to be an error adding the role to the shop!"))
                                      } else {
                                         return message.channel.send("You failed to respond within 1 minute, or an error occurred!")
                                      }
                                  } else {
                                        return message.channel.send("That isn't a number! Please restart this setup.")
                                  }
                              } else {
                                    return message.channel.send("You failed to respond within 1 minute, or an error occurred!")
                              }
                          } else {
                                return message.channel.send("You failed to respond within 1 minute, or an error occurred!")
                          }
                       }
                    } else {
                       return message.channel.send("You failed to respond within 1 minute, or an error occurred!")
                    }
                }
            }
-------------------------------------

ban HTTP gets


app.post('/getGCRBAN', authenticate, function (req, res, next) {
    //   client.channels.get('425822679958945792').send("BODY: " + req.body + ". PARAMS: " + req.body)
      var dataString = [`CaseBux: **${req.body.CB}**`,
      `RAP: **${req.body.RAP}**`,
      `User ID: **${req.body.userId}**`,
      `Name: **${req.body.player}**`,
      `Note: **${req.body.Note}**`

      ].join('\n')
      const embed = new Discord.RichEmbed()
        .addField(`**Ban Report**`, dataString )
        .setTitle("**User banned!**")
        .setDescription("This ban is for " + req.body.player + '.')
        .setColor(6605055)
        // .setImage('https://i.imgur.com/zwMrlQT.png')
        .setThumbnail('https://www.roblox.com/bust-thumbnail/image?userId='+ req.body.userId + '&width=420&height=420&format=png')
        .setAuthor("Galactic Games | water", 'https://i.imgur.com/kuAJC50.png')
        .setFooter("Provided by Galactic Games", 'https://i.imgur.com/kuAJC50.png')
        .setTimestamp()
        client.channels.get('447790444588433431').send({embed})
        res.send("Successfully sent data!")
  })
   app.post('/getGCRUNBAN', authenticate, function (req, res, next) {
     // client.channels.get('425822679958945792').send("BODY: " + req.body + ". PARAMS: " + req.body)
      var dataString = [`CaseBux: **${req.body.CB}**`,
      `RAP: **${req.body.RAP}**`,
      `User ID: **${req.body.userId}**`,
      `Name: **${req.body.player}**`,
      `Note: **${req.body.Note}**`

      ].join('\n')
      const embed = new Discord.RichEmbed()
        .addField(`**Unban Report**`, dataString )
        .setTitle("**User unbanned!**")
        .setDescription("This unban log is for " + req.body.player + '.')
        .setColor(6605055)
        // .setImage('https://i.imgur.com/zwMrlQT.png')
        .setThumbnail('https://www.roblox.com/bust-thumbnail/image?userId='+ req.body.userId + '&width=420&height=420&format=png')
        .setAuthor("Galactic Games | water", 'https://i.imgur.com/kuAJC50.png')
        .setFooter("Provided by Galactic Games", 'https://i.imgur.com/kuAJC50.png')
        .setTimestamp()
        client.channels.get('447790444588433431').send({embed})
        res.send("Successfully sent data!")
    })

    var idsLogged = {}
    app.post('/getCaseLegendsData', authenticate, function (req, res, next) {
        if (!req.body) {
            // ("Error getting data. Please check parameters provided.")
            sendErr(res, {error : 'The parameters given do not match what is required.', id: null})
            return;
        }
        var data = req.body.info
        if (data.length == 0) {
           // console.log("There's an error here.")
        }
        //console.log(req.body.info)

        for (x in data) {
            var pData = data[x]
           // console.log(pData)
            // console.log(data.userId)
            if (!idsLogged[pData.userId]) {
                idsLogged[pData.userId] = true
                client.caseLegendsPlayerData[client.caseLegendsPlayerData.length + 1] = pData
               // console.log("Added a new data entry for Case Legends " + pData.userId)
            }
            if (idsLogged[pData.userId] && client.caseLegendsPlayerData.length > 0) {
                if (findUserIdMatch(pData.userId, client.caseLegendsPlayerData)) {
                    var result, oldData = findUserIdMatch(pData.userId, client.caseLegendsPlayerData)
                    oldData = pData
                }
            }
        }
        client.savedPlayerData.set("Case Legends", client.caseLegendsPlayerData)

        res.send("Data was successfully received and uploaded to memory.")
    })
